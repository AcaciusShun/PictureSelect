{"version":3,"sources":["components/PictureSelect.jsx","components/Page.jsx","App.js","serviceWorker.js","index.js","logo.svg"],"names":["CheckboxGroup","Checkbox","Group","PictureSelect","props","state","value","console","log","this","pictures","onChange","className","length","map","item","index","key","id","src","url","alt","Component","Page","React","useState","setValue","name","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"6OAGMA,G,MAAgBC,IAASC,OAmEhBC,E,YA/DX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAGVC,MAAQ,CACJC,MAAO,EAAKF,MAAME,OALH,E,iFASfC,QAAQC,IAAIC,KAAKL,S,+BAKX,IAAD,EAEiCK,KAAKL,MAAnCM,EAFH,EAEGA,SAAUJ,EAFb,EAEaA,MAAOK,EAFpB,EAEoBA,SAEzB,OACI,yBAAKC,UAAU,kBACX,yBAAKA,UAAU,aACX,kBAAC,IAAD,0BAKQN,EAAMO,OALd,uBAQJ,6BACKH,GAAYA,EAASG,OAAS,EAC3B,kBAACb,EAAD,CACIW,SAAUA,EACVL,MAAOA,GAENI,EAASI,IAAI,SAACC,EAAMC,GAEjB,OACI,kBAAC,IAAD,CACIC,IAAKF,EAAKG,GACVZ,MAAOS,EAAKG,IAKZ,yBAAKC,IAAKJ,EAAKK,IAAKC,IAAI,SAQtC,W,GAvDEC,aCyBbC,EA1BF,WAAO,IAAD,EACSC,IAAMC,SAAS,CAAC,MADzB,mBACVnB,EADU,KACHoB,EADG,KAsBjB,OAFAnB,QAAQC,IAAIF,GAEL,kBAAC,EAAD,CAAeI,SApBL,CACf,CACEQ,GAAI,IACJS,KAAM,MACNP,IAAK,yFAEP,CACEF,GAAI,IACJS,KAAM,MACNP,IAAK,yFAEP,CACEF,GAAI,IACJS,KAAM,MACNP,IAAK,0FAMiCd,MAAOA,EAAOK,SAAU,SAACL,GAAD,OAAWoB,EAASpB,OCRzEsB,MAbf,WAIE,OACE,yBAAKhB,UAAU,OAEb,kBAAC,EAAD,QCAciB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB,6EEnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.2852a321.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Checkbox } from 'antd';\r\nimport './PictureSelect.css'\r\nconst CheckboxGroup = Checkbox.Group;\r\n\r\nclass PictureSelect extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    state = {\r\n        value: this.props.value\r\n    };\r\n\r\n    componentDidMount() {\r\n        console.log(this.props)\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        const { pictures, value, onChange } = this.props\r\n\r\n        return (\r\n            <div className=\"picture-select\">\r\n                <div className=\"check-all\">\r\n                    <Checkbox\r\n                    // indeterminate={this.state.indeterminate}\r\n                    // onChange={this.onCheckAllChange}\r\n                    // checked={this.state.checkAll}\r\n                    >\r\n                        已勾选{value.length}个文件\r\n                    </Checkbox>\r\n                </div>\r\n                <div>\r\n                    {pictures && pictures.length > 0 ?\r\n                        <CheckboxGroup\r\n                            onChange={onChange}\r\n                            value={value}\r\n                        >\r\n                            {pictures.map((item, index) => {\r\n\r\n                                return (\r\n                                    <Checkbox\r\n                                        key={item.id}\r\n                                        value={item.id}\r\n                                    // indeterminate={this.state.indeterminate}\r\n\r\n                                    >\r\n\r\n                                        <img src={item.url} alt=\"\" />\r\n                                    </Checkbox>\r\n                                )\r\n\r\n                            })}\r\n                        </CheckboxGroup>\r\n\r\n\r\n                        : null\r\n                    }\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default PictureSelect;","import React,{Component} from 'react';\r\nimport PictureSelece from './PictureSelect'\r\n\r\n\r\nconst Page = () => {\r\n  const [value, setValue] = React.useState(['1']);\r\n  const picutres = [\r\n    {\r\n      id: '1',\r\n      name: 'foo',\r\n      url: 'https://gw.alipayobjects.com/mdn/rms_d212b7/afts/img/A*LlfeSa8N0WgAAAAAAAAAAABkARQnAQ'\r\n    },\r\n    {\r\n      id: '2',\r\n      name: 'foo',\r\n      url: 'https://gw.alipayobjects.com/mdn/rms_d212b7/afts/img/A*LlfeSa8N0WgAAAAAAAAAAABkARQnAQ'\r\n    },\r\n    {\r\n      id: '3',\r\n      name: 'foo',\r\n      url: 'https://gw.alipayobjects.com/mdn/rms_d212b7/afts/img/A*LlfeSa8N0WgAAAAAAAAAAABkARQnAQ'\r\n    },\r\n  ]; // 同上面的数据\r\n  \r\n  console.log(value); // 输出用户选择图片 id。\r\n  \r\n  return <PictureSelece pictures={picutres} value={value} onChange={(value) => setValue(value)} />\r\n};\r\n\r\n\r\nexport default Page;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Index from './components/Page'\r\n\r\nfunction App() {\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n\r\n      <Index />\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}