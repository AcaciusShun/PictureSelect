{"version":3,"sources":["components/PictureSelect.jsx","components/Page.jsx","App.js","serviceWorker.js","index.js","logo.svg"],"names":["CheckboxGroup","Checkbox","Group","PictureSelect","state","checkAll","indeterminate","value","pictures","onCheckAllChange","e","target","checked","props","picturesOptions","map","item","push","id","onChange","setState","checkedList","length","this","className","index","key","src","url","alt","console","log","Component","Page","React","useState","setValue","name","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"qPAGMA,G,MAAgBC,IAASC,OA+GhBC,E,2MA5GbC,MAAQ,CACNC,UAAU,EACVC,eAAe,EACfC,MAAO,GACPC,SAAU,I,EAoBZC,iBAAmB,SAAAC,GAGjB,GAFcA,EAAEC,OAAOC,QAEV,CACX,IAAIJ,EAAW,EAAKK,MAAML,SACtBM,EAAkB,GACtBN,EAASO,IAAI,SAAAC,GAGX,OADAF,EAAgBG,KAAKD,EAAKE,IACnBF,IAGT,EAAKH,MAAMM,SAAX,UAAwBL,IACxB,EAAKM,SAAS,CACZf,UAAU,SAIZ,EAAKQ,MAAMM,SAAS,IACpB,EAAKC,SAAS,CACZf,UAAU,K,EAKhBc,SAAW,SAAAE,GACT,EAAKR,MAAMM,SAAX,YAAwBE,IACxB,IAAIb,EAAW,EAAKJ,MAAMI,SAEtBa,EAAYC,SAAWd,EAASc,OAClC,EAAKF,SAAS,CACZf,UAAU,EACVC,eAAe,IAGRe,EAAYC,OAASd,EAASc,QAAUD,EAAYC,OAAS,EACtE,EAAKF,SAAS,CACZf,UAAU,EACVC,eAAe,IAIjB,EAAKc,SAAS,CACZf,UAAU,EACVC,eAAe,K,qHAKX,IAAD,EACqBiB,KAAKnB,MAAzBI,EADD,EACCA,SAAUD,EADX,EACWA,MAClB,OACE,yBAAKiB,UAAU,kBACb,yBAAKA,UAAU,aACb,kBAAC,IAAD,CACElB,cAAeiB,KAAKnB,MAAME,cAC1Ba,SAAUI,KAAKd,iBACfG,QAASW,KAAKnB,MAAMC,UAHtB,qBAKME,EAAMe,OALZ,uBASF,6BACGd,GAAYA,EAASc,OAAS,EAC7B,kBAACtB,EAAD,CAAemB,SAAUI,KAAKJ,SAAUZ,MAAOA,GAC5CC,EAASO,IAAI,SAACC,EAAMS,GACnB,OACE,kBAAC,IAAD,CACEC,IAAKV,EAAKE,GACVX,MAAOS,EAAKE,IAEZ,yBAAKS,IAAKX,EAAKY,IAAKC,IAAI,SAK9B,U,gDA9FoBhB,EAAOT,GAGrC,OAFA0B,QAAQC,IAAIlB,EAAOT,GAEfS,EAAMN,QAAUH,EAAMG,OAASM,EAAML,WAAaJ,EAAMI,SACnD,CACLD,MAAOM,EAAMN,MACbC,SAAUK,EAAML,UAIbJ,M,GAlBiB4B,aCyBbC,EA1BF,WAAO,IAAD,EACSC,IAAMC,SAAS,CAAC,MADzB,mBACV5B,EADU,KACH6B,EADG,KAsBjB,OAFAN,QAAQC,IAAIxB,GAEL,kBAAC,EAAD,CAAeC,SApBL,CACf,CACEU,GAAI,IACJmB,KAAM,MACNT,IAAK,yFAEP,CACEV,GAAI,IACJmB,KAAM,MACNT,IAAK,yFAEP,CACEV,GAAI,IACJmB,KAAM,MACNT,IAAK,0FAMiCrB,MAAOA,EAAOY,SAAU,SAACZ,GAAD,OAAW6B,EAAS7B,OCRzE+B,MAbf,WAIE,OACE,yBAAKd,UAAU,OAEb,kBAAC,EAAD,QCAce,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB,6EEnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.b45f6164.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Checkbox } from \"antd\";\r\nimport \"./PictureSelect.css\";\r\nconst CheckboxGroup = Checkbox.Group;\r\n\r\nclass PictureSelect extends Component {\r\n  state = {\r\n    checkAll: false,\r\n    indeterminate: true,\r\n    value: [],\r\n    pictures: []\r\n  };\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    console.log(props, state);\r\n\r\n    if (props.value !== state.value || props.pictures !== state.pictures) {\r\n      return {\r\n        value: props.value,\r\n        pictures: props.pictures\r\n      };\r\n    }\r\n\r\n    return state;\r\n  }\r\n\r\n  componentDidMount() {\r\n    \r\n  }\r\n\r\n  onCheckAllChange = e => {\r\n    let checked = e.target.checked;\r\n    //全选\r\n    if (checked) {\r\n      let pictures = this.props.pictures;\r\n      let picturesOptions = [];\r\n      pictures.map(item => {\r\n        // 获取所有多选框的值\r\n        picturesOptions.push(item.id);\r\n        return item;\r\n      });\r\n      // 设置当前选中值为所有值\r\n      this.props.onChange([...picturesOptions]);\r\n      this.setState({\r\n        checkAll: true\r\n      });\r\n    } else {\r\n      // 取消全选\r\n      this.props.onChange([]);\r\n      this.setState({\r\n        checkAll: false\r\n      });\r\n    }\r\n  };\r\n\r\n  onChange = checkedList => {\r\n    this.props.onChange([...checkedList]);\r\n    let pictures = this.state.pictures;\r\n    // 如果全选\r\n    if (checkedList.length === pictures.length) {\r\n      this.setState({\r\n        checkAll: true,\r\n        indeterminate: false\r\n      });\r\n      // 选择部分\r\n    } else if (checkedList.length < pictures.length && checkedList.length > 0) {\r\n      this.setState({\r\n        checkAll: false,\r\n        indeterminate: true\r\n      });\r\n    } else {\r\n      // 不选择\r\n      this.setState({\r\n        checkAll: false,\r\n        indeterminate: false\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { pictures, value } = this.state;\r\n    return (\r\n      <div className=\"picture-select\">\r\n        <div className=\"check-all\">\r\n          <Checkbox\r\n            indeterminate={this.state.indeterminate}\r\n            onChange={this.onCheckAllChange}\r\n            checked={this.state.checkAll}\r\n          >\r\n            已勾选{value.length}个文件\r\n          </Checkbox>\r\n        </div>\r\n\r\n        <div>\r\n          {pictures && pictures.length > 0 ? (\r\n            <CheckboxGroup onChange={this.onChange} value={value}>\r\n              {pictures.map((item, index) => {\r\n                return (\r\n                  <Checkbox\r\n                    key={item.id}\r\n                    value={item.id}\r\n                  >\r\n                    <img src={item.url} alt=\"\" />\r\n                  </Checkbox>\r\n                );\r\n              })}\r\n            </CheckboxGroup>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PictureSelect;\r\n","import React,{Component} from 'react';\r\nimport PictureSelece from './PictureSelect'\r\n\r\n\r\nconst Page = () => {\r\n  const [value, setValue] = React.useState(['1']);\r\n  const picutres = [\r\n    {\r\n      id: '1',\r\n      name: 'foo',\r\n      url: 'https://gw.alipayobjects.com/mdn/rms_d212b7/afts/img/A*LlfeSa8N0WgAAAAAAAAAAABkARQnAQ'\r\n    },\r\n    {\r\n      id: '2',\r\n      name: 'foo',\r\n      url: 'https://gw.alipayobjects.com/mdn/rms_d212b7/afts/img/A*LlfeSa8N0WgAAAAAAAAAAABkARQnAQ'\r\n    },\r\n    {\r\n      id: '3',\r\n      name: 'foo',\r\n      url: 'https://gw.alipayobjects.com/mdn/rms_d212b7/afts/img/A*LlfeSa8N0WgAAAAAAAAAAABkARQnAQ'\r\n    },\r\n  ]; // 同上面的数据\r\n  \r\n  console.log(value); // 输出用户选择图片 id。\r\n  \r\n  return <PictureSelece pictures={picutres} value={value} onChange={(value) => setValue(value)} />\r\n};\r\n\r\n\r\nexport default Page;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Index from './components/Page'\r\n\r\nfunction App() {\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n\r\n      <Index />\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}